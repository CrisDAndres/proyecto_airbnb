# ---------------------LIBRER√çAS----------------------#
import streamlit as st
import streamlit.components.v1 as components
import numpy as np
import pandas as pd
import warnings
from pandas.errors import SettingWithCopyWarning
# Gr√°ficas
import seaborn as sns
import matplotlib.pyplot as plt
import plotly_express as px
import plotly.graph_objects as go
# Mapas interactivos
import folium
from folium import plugins
from folium.plugins import FastMarkerCluster
import geopandas as gpd
from streamlit_folium import st_folium, folium_static
# Nube de palabras
from PIL import Image 


warnings.simplefilter(action='ignore', category=(SettingWithCopyWarning))
 

# ---------------------CONFIGURACI√ìN DE LA P√ÅGINA----------------------#
st.set_page_config(
    page_title="Airbnb: Roma",
    page_icon="üèõÔ∏è",
    layout="wide", # Esta opci√≥n busca el tam de la pantalla, y de izq a dcha va a intentar que el contenido ocupe el mayor espacio posible
    initial_sidebar_state="expanded", # o collapsed
)

# ---------------------COSAS QUE VAMOS A USAR EN LA APP----------------------#

# Funci√≥n para cargar los datos, mantener los datos cargados
# y evitar recargas innecesarias que puedan reiniciar la aplicaci√≥n.
@st.cache_data()
def load_data():
    df_nopreproc = pd.read_csv("data/airbnb_nopreproc.csv") # Antes de cualquier preprocesamiento, solo con algunas columnas elegidas
    df_preproc1 = pd.read_csv("data/airbnb_preproc1.csv") # Antes de reparar los outliers
    df = pd.read_csv("data/airbnb_limpio.csv")
    geo_final = pd.read_csv("data/geo_final.csv") 
    return df_nopreproc, df_preproc1, df, geo_final

# Carga de datos
df_nopreproc, df_preproc1, df, geo_final = load_data()

# Im√°genes
logo = "img/logorome.png" 
image = "img/rome_ia.jpg"


# ---------------------HEADER----------------------#
st.image(image, caption = 'Imagen generada por IA', width=250)
st.title("An√°lisis de los alojamientos de Airbnb en Roma")
st.write('üèõÔ∏è ¬°Explora esta maravillosa ciudad!')


# ---------------------SIDEBAR----------------------#

st.sidebar.image(logo,width=250) 
st.sidebar.title("√çNDICE")

# Mejora: Mantener el estado de la selecci√≥n actual en la barra lateral para evitar reinicios
page_options = ["Introducci√≥n", "Preprocesamiento", "An√°lisis exploratorio"]
page = st.sidebar.radio("Seleccione la p√°gina:", page_options, index=0, key='current_page')

page_options = ["Introducci√≥n", "Preprocesamiento", "An√°lisis exploratorio"]


# ---------------------BODY----------------------#

# P√ÅGINA 1-------------------------------------
if page == "Introducci√≥n":
    
    st.markdown("""
                ***Roma, la ciudad eterna, ha sido el punto de encuentro de diferentes culturas y religiones con una historia que se remonta a m√°s de dos milenios.
                Ubicada en la regi√≥n de Lazio, Roma es la capital del pa√≠s y la ciudad m√°s grande de la pen√≠nsula de Italia.
                Hoy en d√≠a es una metr√≥polis vibrante que combina la grandeza de su pasado con la vitalidad de una ciudad moderna, que atrae a millones de turistas cada a√±o.***
                """)

    st.markdown("""
             *En este contexto, el mercado de alojamientos de Airbnb en Roma desempe√±a un papel importante, brindando a los visitantes la oportunidad de sumergirse en la vida cotidiana de la ciudad y experimentarla desde una perspectiva √∫nica y personalizada.
             En este trabajo se analizar√° la oferta de alojamientos de Airbnb en Roma, explorando sus caracter√≠sticas, tendencias y su impacto en el mercado inmobiliario y tur√≠stico de la ciudad.*
             """)
    
    st.markdown("""
                
                El dataset de los anuncios tiene 29357 filas y 75 columnas. En este caso, a partir de ese dataset se ha creado otro con 23 columnas, que ser√°n sobre las que trabajaremos:

                1. ``host:id``: Identificador del anfitri√≥n.
                2. ``host_since``: Fecha en que el anfitri√≥n se uni√≥ a Airbnb.
                3. ``host_location``: Ubicaci√≥n del anfitri√≥n.
                4. ``host_response_rate``: Tasa de respuesta del anfitri√≥n.
                5. ``host_acceptance_rate``: Tasa de aceptaci√≥n de las solicitudes de reserva por parte del anfitri√≥n.
                6. ``host_is_superhost``: Indicador de si el anfitri√≥n es un superhost o no.
                7. ``host_listings_count``: N√∫mero de listados del anfitri√≥n.
                8. ``host_has_profile_pic``: Indicador de si el anfitri√≥n tiene una foto de perfil.
                9. ``neighbourhood_cleansed``: Vecindario de la propiedad despu√©s de alg√∫n tipo de limpieza o normalizaci√≥n.
                10. ``latitude``: Coordenadas geogr√°ficas (latitud) de la propiedad.
                11. ``longitude``: Coordenadas geogr√°ficas (longitud) de la propiedad.
                12. ``property_type``: Tipo de propiedad.
                13. ``room_type``: Tipo de habitaci√≥n ofrecida.
                14. ``accommodates``: N√∫mero m√°ximo de personas que pueden ser alojadas en la propiedad.
                15. ``bathrooms_text``: N√∫mero de ba√±os en la propiedad.
                16. ``price``: Precio de alquiler por noche de la propiedad.
                17. ``availability_30``: Disponibilidad de la propiedad en los pr√≥ximos 30 d√≠as.
                18. ``availability_60``: Disponibilidad de la propiedad en los pr√≥ximos 60 d√≠as.
                19. ``availability_90``: Disponibilidad de la propiedad en los pr√≥ximos 90 d√≠as.
                20.	``number_of_reviews``: N√∫mero total de rese√±as.
                21.	``review_scores_rating``: Puntuaci√≥n global.
                22. ``review_scores_location``: Puntuaci√≥n de la localizaci√≥n.
                23.	``reviews_per_month``: Promedio de rese√±as recibidas por mes para una propiedad en particular.
            
                """  )      
    st.write('------')                    
    st.markdown('### **Visualizaci√≥n del dataframe filtrado:**')
    st.dataframe(df_nopreproc.head())

    

# P√ÅGINA 2-------------------------------------
elif page == "Preprocesamiento":
    st.write('En primer lugar, tenemos que preprocesar el dataframe. Para ello se han seguido los siguientes pasos:')
    st.markdown("""
                - TRATAMIENTO DE COLUMNAS
                    - Variable ``price``: Quitamos $ y comas
                    - Variables ``host_response_rate`` y ``host_acceptance_rate``: Eliminamos % detr√°s del n√∫mero                 
                - TRATAMIENTO DE VALORES NULOS
                    - Imputaci√≥n con la media: variables con n√∫meros reales (``host_response_rate``,``host_acceptance_rate``,``price``,``review_scores_rating``,``review_scores_location``,``reviews_per_month``)
                    - Imputaci√≥n con la mediana: variables con n√∫meros enteros (``host_listings_count``)                 
                - TRATAMIENTO DE OUTLIERS
                    - Variable ``price``             
                
                
                Para informaci√≥n del c√≥digo empleado, visita mi GitHub: https://github.com/CrisDAndres/proyecto_airbnb
                
                ---------------------
        """)
    st.markdown('### **Para la visualizaci√≥n de los valores at√≠picos, obtenemos los par√°metros estad√≠sticos de las variables num√©ricas de inter√©s:**')
    st.code("df.describe().T",language = 'python')
    # Configura la visualizaci√≥n de los n√∫meros en notaci√≥n decimal
    pd.set_option('display.float_format', lambda x: '%.2f' % x)
    # selecciono las variables que me interesan
    var = df_preproc1[['host_response_rate','host_acceptance_rate','host_is_superhost','host_listings_count','host_has_profile_pic','accommodates','price', 'availability_30', 'availability_60', 'availability_90','number_of_reviews','review_scores_rating','review_scores_location','reviews_per_month']]
    # Aplicar la funci√≥n describe() solo a las columnas num√©ricas
    var.describe().T
    st.write('Entre los par√°metros estad√≠sticos de las diferentes variables, destaca la desviaci√≥n est√°ndar de la variable ``price``. Vamos a visualizarla:')
    # Crear el gr√°fico de cajas y bigotes
    st.set_option('deprecation.showPyplotGlobalUse', False) #Elimino el warning que me sale en el gr√°fico
    plt.figure(figsize=(10, 5))  # Tama√±o del gr√°fico
    sns.set(style="whitegrid")  # Estilo de la cuadr√≠cula de Seaborn
    fig = sns.boxplot(x="price", data=df_preproc1, color = '#73C4A8')  # Crear el gr√°fico de cajas y bigotes
    fig.set_xlabel('Precios', fontsize=14)
    # Mostrar el gr√°fico de seaborn
    st.pyplot()
        
    st.write("""Hay valores at√≠picos superiores.
                    Consideramos valor at√≠pico superior lo que est√© fuera del intervalo ``Q3 + Rango Intercuart√≠lico (IQR) x 1.5``.
                    Reemplazamos esos valores at√≠picos por ese l√≠mite superior.
                    """)
        
    if st.button('Realizar preprocesamiento'):
        with st.spinner('Preprocesando...'):
                # C√≥digo de preprocesamiento
                # (No voy a hacerlo en Streamlit, simplemente a visualizarlo)
                #
            st.success('Preprocesamiento completado.')

            st.write('Visualizamos de nuevo el gr√°fico de cajas de la variable ``price`` y vemos que ya no est√°n esos outliers:')
            plt.figure(figsize=(10, 5))  # Tama√±o del gr√°fico
            sns.set(style="whitegrid")  # Estilo de la cuadr√≠cula de Seaborn
            fig = sns.boxplot(x="price", data=df, color = '#73C4A8')  # Crear el gr√°fico de cajas y bigotes
            fig.set_xlabel('Precios', fontsize=14)
            # Mostrar el gr√°fico de seaborn
            st.pyplot()
            st.write('Tampoco hay nulos en las variables de inter√©s, y est√°n las columnas corregidas. El dataframe preprocesado se ve as√≠:')
            st.dataframe(df.head())



# P√ÅGINA 3-------------------------------------
elif page == "An√°lisis exploratorio":

    st.markdown("""
                Una vez preprocesados los datos, vamos a explorar las distintas variables para ver la informaci√≥n que nos ofrecen.
                ------------------------                
        """)

    st.markdown('Primero vamos a echar un vistazo al mapa y a los diferentes alojamientos y sus ubicaciones. Si aumentas el mapa, ir√°n apareciendo m√°s:')
    latitudes = df['latitude'].tolist()
    longitudes = df['longitude'].tolist()
    coordenadas = list(zip(latitudes,longitudes))
    # Defino la ubicacion inicial del mapa
    latitud_1 = df['latitude'].iloc[0]
    longitud_1 = df['longitude'].iloc[0]
    # Crear el mapa de Folium con la ubicaci√≥n inicial especificada
    map = folium.Map(location = [latitud_1,longitud_1],zoom_start=10)
    # A√±adir las ubicaciones al mapa generado de Folium
    FastMarkerCluster(data=coordenadas).add_to(map) # Se usa para agrupar los marcadores mas cercanos en clusteres
    folium.Marker(location=[latitud_1,longitud_1]).add_to(map)
    folium_static(map) #con st_folium no me funcionaba en el Explore

    # ---------------------TABS (pesta√±as)----------------------#
    tab1, tab2, tab3, tab4 = st.tabs(
        ['An√°lisis de los barrios','Otras variables','An√°lisis de correlaci√≥n','Rese√±as']) 
    with tab1:
        st.write('En este apartado, podr√°s obtener diferente informaci√≥n acerca de los alojamientos en los diferentes barrios de Roma, como la cantidad de viviendas de Airbnb, su precio medio o la puntuaci√≥n media de los alojamientos. Adem√°s, podr√°s explorar de manera interactiva el mapa de Roma. ¬°Disfruta explorando!')
        ##  1. Barrio VS N¬∫ alojamientos

        st.markdown('## 1. Barrio VS N¬∫ alojamientos')
        st.write('En primer lugar, nos interesa saber la distribuci√≥n de los alojamientos por cada barrio. Vemos que en el centro hist√≥rico el n√∫mero de alojamientos o anuncios es mucho mayor en comparaci√≥n con los dem√°s barrios:')
            
        aloj_barrio = df['neighbourhood_cleansed'].value_counts().sort_values(ascending=True)
            
        #Gr√°fica de barras de plotly
        fig = px.bar(aloj_barrio, x=aloj_barrio.values, y=aloj_barrio.index,color=aloj_barrio.values, color_continuous_scale='BrBG', text_auto = False) #Con text_auto sale el nombre del conteo en cada barra
        #actualizamos el layout
        fig.update_layout(
                title='N√∫mero de alojamientos por barrios de Roma', title_x=0.35, 
                yaxis_title='Barrios de Roma',
                xaxis_title='N√∫mero de alojamientos',
                template='plotly_white',
                width=1000, height=500, coloraxis_colorbar_title='N¬∫ alojamientos')  # Agregar t√≠tulo a la leyenda de colores) 

        # Mostrar el gr√°fico de plotly
        st.plotly_chart(fig)
            
        ## 2. Barrio VS Precio medio

        st.markdown('## 2. Barrio VS Precio medio')
        st.write('Tambi√©n interesar√≠a saber el precio medio por cada barrio. Como era de esperar, alojarse en el centro hist√≥rico es m√°s caro:')
            
        barrio_precio = df.groupby('neighbourhood_cleansed')['price'].mean().sort_values(ascending=True)
            
        #Gr√°fica de barras de plotly
        fig = px.bar(barrio_precio,
                        color=barrio_precio.values,
                        color_continuous_scale='tempo', 
                        template='plotly_white',
                        width=1000, height=500)

        fig.update_layout(title='Precio medio por alojamiento y barrios', title_x=0.35, coloraxis_colorbar_title='Precio medio', 
        xaxis_title='Barrios de Roma',
        yaxis_title='Precio medio por noche')

        # Mostrar el gr√°fico de plotly
        st.plotly_chart(fig)
         
        ##  3. Barrio VS Puntuaci√≥n
        st.markdown('## 3. Barrio VS Puntuaci√≥n')
        st.markdown('Tambi√©n algo importante es saber la puntuaci√≥n media por cada barrio, en una escala de 0 a 5 ‚òÖ.')
        st.markdown('**Empezaremos mirando la puntuaci√≥n general:**')
        # Puntuaci√≥n general
        punt_barrio_general = df.groupby('neighbourhood_cleansed')['review_scores_rating'].mean().sort_values().reset_index()
        fig = px.bar(punt_barrio_general, x='review_scores_rating', y='neighbourhood_cleansed', color='review_scores_rating', color_continuous_scale='tempo')
        fig.update_layout(height=500, width=1000, title_text="Puntuaci√≥n de los alojamientos por barrios (0-5 ‚òÖ)", title_x=0.3,xaxis_title='Puntuaci√≥n general',yaxis_title='', coloraxis_colorbar_title='Puntuaci√≥n')  
          # Separar los n√∫meros del eje y por 1 en 1
        fig.update_yaxes(
        tickvals=list(range(len(punt_barrio_general['neighbourhood_cleansed']))),
        tickmode='array') 
        st.plotly_chart(fig)
            
        st.markdown('**Y ahora la puntuaci√≥n por la localizaci√≥n:**')
        # Puntuaci√≥n de la localizaci√≥n
        punt_barrio_localiz = df.groupby('neighbourhood_cleansed')['review_scores_location'].mean().sort_values().reset_index()
        fig = px.bar(punt_barrio_localiz, x='review_scores_location', y='neighbourhood_cleansed', color='review_scores_location', color_continuous_scale='tempo')
        fig.update_layout(height=500, width=1000, title_text="Puntuaci√≥n de los alojamientos por barrios (0-5 ‚òÖ)", title_x=0.3,xaxis_title='Puntuaci√≥n de la localizaci√≥n',yaxis_title='',coloraxis_colorbar_title='Puntuaci√≥n')
        st.plotly_chart(fig)
        
        # 4. MAPAS INTERACTIVOS
        st.markdown('## 4. MAPAS INTERACTIVOS') 
        st.write('Por √∫ltimo, podemos hacer un an√°lisis de estos 3 puntos visualiz√°ndolos mediante mapas interactivos:')
        
        # Abrir archivo html con la informaci√≥n de los mapas generados con folium en modo lectura
        HtmlFile = open("html/rome_map.html", 'r', encoding='utf-8')
        # Leer y cargar en la variable source_code
        source_code = HtmlFile.read() 
        print(source_code)
        # visualizar el contenido en streamlit
        components.html(source_code, height = 600)
        
        st.write('Mediante este mapa de calor podemos ver el precio medio de las viviendas de airbnb:')
        HtmlFile = open("html/rome_hmap.html", 'r', encoding='utf-8')
        source_code = HtmlFile.read() 
        print(source_code)
        components.html(source_code, height = 600)
        
    # TAB2----------------------------------

    with tab2:
        st.markdown('## 1. Tipos de alojamiento en los anuncios de Airbnb ')
        st.write("""**An√°lisis de la cantidad de propiedades diferentes por cada tipo de habitaci√≥n anunciadas en la plataforma.
                 Se mostrar√°n las m√°s frecuentes (+ de 200 apariciones) y las menos frecuentes (menos de 50).**""")
    # --------------Alojamientos m√°s frecuentes
        
        # Gr√°fico de barras plotly de los alojamientos m√°s frecuentes
        aloj = df.groupby(['property_type', 'room_type']).size().reset_index(name='count') # size() calcula el tama√±o de cada grupo (n¬∫ de room_type de cada grupo de property_type)
        aloj = aloj[aloj['count']>200].sort_values(by=['count']) #Selecciono solo los tipos de propiedad que aparecen m√°s de 200 veces y ordeno los valores por las apariciones        
        colors = {'Entire home/apt': '#F5B041', 'Private room': '#AF7AC5', 'Hotel room': '#16A085','Shared room':'#ABEBC6'}
        fig = px.bar(aloj, y='property_type', x='count', color='room_type',color_discrete_map=colors)  

        fig.update_layout(yaxis={'categoryorder':'total ascending'},
            title='Cantidad de alojamientos m√°s frecuentes (> 200 anuncios)', title_x=0.3, 
            xaxis_title='Cantidad de alojamientos por tipo',
            yaxis_title='Tipo de propiedad',
            template='plotly_white',
            width=1000, height=600, legend_title='Tipo de habitaci√≥n/apt')
        st.plotly_chart(fig)

        st.write('Se puede observar como el **top3** de alojamientos ofertados m√°s frecuentes son:')
        st.markdown("""           
                  - Vivienda completa
                  - Condominios completos
                  - Habitaci√≥n privada en vivienda""")
        
        st.markdown('**Ahora voy a graficar los alojamientos menos frecuentes (menos de 50 veces)**')
        aloj = df.groupby(['property_type', 'room_type']).size().reset_index(name='count') 
        aloj = aloj[aloj['count']<5].sort_values(by=['count'],ascending=False) #Selecciono solo los tipos de propiedad que aparecen menos de 50 veces

        fig = px.bar(aloj, y='property_type', x='count', color='room_type',color_discrete_map=colors)

        fig.update_layout(yaxis={'categoryorder':'total ascending'},
            title='Cantidad de alojamientos menos frecuentes (< 50 anuncios)', title_x=0.3, 
            xaxis_title='Cantidad de alojamientos por tipo',
            yaxis_title='Tipo de propiedad',
            template='plotly_white', xaxis=dict(dtick=1),
            width=1000, height=600, legend_title='Tipo de habitaci√≥n/apt')
        st.plotly_chart(fig)
            
        st.markdown('Se puede observar como los alojamientos ofertados 1 sola vez son algo curiosos, destacando alojamientos en **molinos de viento** *(windmill)*, **castillos** o **barcos**.')
        st.write('-----')
    # --------------N¬∫ de personas que se alojan
        st.markdown('## 2. N¬∫ de personas que se alojan')
        st.write('Se puede observar que lo m√°s frecuente son 2 personas. El m√°ximo es 16, que es lo m√°ximo permitido por Airbnb:')
        
        # Abrir archivo html 
        HtmlFile = open("html/fig1.html", 'r', encoding='utf-8')
        # Leer y cargar en la variable source_code
        source_code = HtmlFile.read() 
        # C√≥digo CSS para ajustar la imagen a la pantalla
        css_code = """
        <style>
            img {
                width: 100%;
                height: 100%;
            }
        </style>
        """

        # Combinar el c√≥digo HTML con el CSS
        html_with_css = f"{css_code}\n{source_code}"
        # visualizar el contenido en streamlit
        components.html(source_code, height = 500, scrolling=True)
        
        st.write('-----')
    # --------------Puntuaci√≥n general VS Precio

        st.markdown('## 3. Puntuaci√≥n general VS Precio')
        st.write("""Vamos a observar la relaci√≥n entre estas 2 variables continuas. Observamos como los alojamientos m√°s caros no son los que tienen una mejor puntuaci√≥n.
                 Sorprendentemente, la mayor proporci√≥n de alojamientos con buenas puntuaciones est√°n por debajo del precio medio:""")
        punt_precio = df.groupby('review_scores_rating')['price'].mean().sort_values().reset_index()
        precio_medio = df['price'].mean().round(2)
        # Crear un scatter plot
        fig = px.scatter(punt_precio, y='price', x='review_scores_rating',opacity=0.7, labels={'price': 'Precio', 'review_scores_rating': 'Puntuaci√≥n general (0-5)'})
        fig.update_layout(height=500, width=1000, title_text="Relaci√≥n entre el precio y la puntuaci√≥n general de los alojamientos", title_x=0.3,xaxis_title="Puntuaci√≥n general (0-5)", yaxis_title="Precio",
                        )  
        # Actualizar el tama√±o de los marcadores
        fig.update_traces(marker=dict(size=7)) 
        # Agregar la l√≠nea horizontal para la media del precio
        fig.add_hline(y=precio_medio, line_dash="dot", line_color="red", annotation_text=f"Precio medio: {precio_medio}",
                    annotation_position="top left")
        st.plotly_chart(fig)
        st.write('-----')

    # --------------top10 host

        st.markdown('## 4. Top 10 host')
        st.markdown('Vamos a calcular los 10 host que m√°s anuncios tienen:')
        # Calculamos el top 10 de host con m√°s anuncios
        top10_host=df['host_id'].value_counts().head(10)
        top10_host
        st.markdown('Vemos que el host que m√°s anuncios ha publicado es el n√∫mero ``23532561``, con **265** anuncios.')
        # Muestro imagen guardada
        image = "img/fig2.png"
        st.image(image, width=700)

        st.markdown('¬øY en total cu√°l es la proporci√≥n de **host/superhost**?')
        # Crear el gr√°fico de pastel
        colors = ['#16A085', '#922B21']
        fig = px.pie(values=df['host_is_superhost'].value_counts(), names=['No superhost','SUPERHOST'], color_discrete_sequence=colors, hole=0.3)
        fig.update_layout(title='',width=700, height=500, showlegend=True,  title_x=0.5, template = 'plotly_white',legend=dict(
                orientation='h',  # Orientaci√≥n horizontal
                y=-0.05,  # Desplazamiento vertical desde el gr√°fico (0-1)
                xanchor='center',  # Ancla en el centro horizontal
                x=0.5  # Desplazamiento horizontal desde el gr√°fico (0-1)
            ))
        fig.update_traces(textinfo='percent',textfont_size=20, marker = dict(line = dict(color = 'black', width = 0.5)))
        fig.update_traces()

        st.plotly_chart(fig)
        
        st.markdown('De los datos podemos pensar que no es f√°cil conseguir ser Superhost. **Para conseguir el distintivo, debes ser el propietario del anuncio y tener una cuenta en regla que cumpla los siguientes requisitos:**')

        st.markdown("""
- Haber completado como m√≠nimo 10 estancias o 3 reservas que sumen al menos **100 noches** en total.
- Haber mantenido un √≠ndice de respuesta del **90 %** o un porcentaje superior.
- Haber mantenido un √≠ndice de cancelaci√≥n de **menos del 1 %**.
- Haber mantenido una valoraci√≥n general de **4,8**.""")
    
        #---------------panel powerBI
        st.write('---------')
        st.markdown('#### Podemos ver de manera interactiva la relaci√≥n entre las variables mediante este panel de Power BI, en el que podr√°s elegir el barrio que te interese y poder decidir su relaci√≥n calidad-precio y si se ajusta a tus necesidades:')
        
        # C√≥digo HTML del panel de Power BI
        html_code =  """<iframe title="panel_airbnb" width="600" height="373.5" src="https://app.powerbi.com/view?r=eyJrIjoiZjNjMzMwZTUtYzhiMy00NmJlLTg0NGEtMTNlOTI5ODdkODgwIiwidCI6IjhhZWJkZGI2LTM0MTgtNDNhMS1hMjU1LWI5NjQxODZlY2M2NCIsImMiOjl9" frameborder="0" allowFullScreen="true"></iframe>
        """
        # Insertar el c√≥digo HTML en la aplicaci√≥n de Streamlit
        components.html(html_code, height = 1000)
    
    # TAB3----------------------------------
    with tab3:
        st.write('Como no sabemos la distribuci√≥n de las variables, vamos a utilizar la correlaci√≥n de ``Spearman``:')

        # Muestro imagen guardada
        image = "img/fig3.png"
        st.image(image, width=1000)
        
        st.write('Algunas de las conclusiones que se pueden observar del gr√°fico de correlaci√≥n son las siguientes:')
        st.markdown("""
                    **CORRELACI√ìN POSITIVA**
                    - **Ratio aceptaci√≥n/respuesta**: siguen una correlaci√≥n moderada positiva (<span style="font-size:20px;">**0.34**</span>).
                    - **Superhost** VS n¬∫ rese√±as**: tienen una correlaci√≥n positiva (<span style="font-size:20px;">**0.39**</span>). Adem√°s los superhost tambi√©n tiene una alta correlaci√≥n con la puntuaci√≥n general de las rese√±as (<span style="font-size:20px;">**0.36**</span>).
                    - **Precio VS n¬∫ de alojados**: tienen una fuerte correlaci√≥n (<span style="font-size:20px;">**0.42**</span>), lo cual indica que a m√°s personas, mayor es el precio de la vivienda.
                    
                    **CORRELACI√ìN NEGATIVA**
                    - **Disponibilidad VS Superhost**: tienen una correlaci√≥n negativa, lo cual indica que hay m√°s probabilidad de que los superhost agoten antes la disponibilidad de sus alojamientos.
                    - **Precio VS rese√±as al mes**: tienen correlaci√≥n negativa (<span style="font-size:20px;">**- 0.16**</span>), lo cual indica que a mayores precios tengan los alojamientos, menos rese√±as tienen cada mes.""",unsafe_allow_html=True)

    # TAB4----------------------------------
    with tab4:
        st.markdown('Con las rese√±as de los alojamientos, se ha creado una nube de palabras, en la que se pueden ver las palabras m√°s frecuentes en base a su tama√±o:')   
      

        wordcloud = "img/nube_airbnb.png"

        st.image(wordcloud,width=400, use_column_width=True)
        st.write('-------')
        st.write('Para informaci√≥n del c√≥digo empleado, visita mi GitHub: https://github.com/CrisDAndres/proyecto_airbnb')